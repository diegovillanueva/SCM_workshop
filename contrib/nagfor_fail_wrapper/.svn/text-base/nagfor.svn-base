#! /usr/bin/perl
#
# Copyright  (C)  2015  Thomas Jahns <jahns@dkrz.de>
#
# Version: 1.0
# Keywords: configure configure.ac autotools
# Author: Thomas Jahns <jahns@dkrz.de>
# Maintainer: Thomas Jahns <jahns@dkrz.de>
# URL: https://www.dkrz.de/redmine/projects/show/scales-ppm
#
# Redistribution and use in source and binary forms, with or without
# modification, are  permitted provided that the following conditions are
# met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# Neither the name of the DKRZ GmbH nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Fix problematic argument handling in nagfor compiler
# when used with e.g. libtool
#
use strict;
use warnings;

use File::Spec::Functions qw(catfile);

sub mask_nagfor_arg($;);

my ($debug, $verbose) = (0, 0);

print STDERR __FILE__, "\n"
    if ($debug);
# search PATH for occurrence of other nagfor
my $delegate;
foreach my $dir (split(/:/, $ENV{'PATH'}))
{
  my $candidate = catfile($dir, 'nagfor');
  print STDERR $candidate, "\n"
      if ($debug);
  if (-x $candidate and $candidate ne __FILE__)
    {
      $delegate = $candidate;
      last;
    }
}
die('No nagfor compiler to invoke found!', "\n")
    unless (defined($delegate));

# filter arguments for known options that need masking
my @args = map { mask_nagfor_arg($_) } @ARGV;

BEGIN {

  my %replacements
      = (
         '-pthread' => '-Wc,-pthread',
         '-shared' => '-Wl,-shared'
        );
  sub mask_nagfor_arg($;)
  {
    my ($arg) = @_;
    exists($replacements{$arg})?$replacements{$arg}:$arg;
  }
}

# invoke real compiler with masked arguments
print(STDERR '(', join(', ', $delegate, @args), ')', "\n")
    if ($debug or $verbose);

exec($delegate, @args)
    or die('exec failed', "\n");

# Local Variables:
# mode: cperl
# End:

